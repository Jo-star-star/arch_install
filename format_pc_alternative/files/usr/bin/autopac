#!/bin/bash

set -euo pipefail  # x for debug

if [ "$#" != "1" ]; then
    echo "ERROR: One argument needed - must be one of: update,upgrade"
    exit 1
fi

if [ "$(id -u)" != "0" ]; then
    echo "Re-running as root"
    exec sudo -E "$0" ${1+"$@"}
fi

#if [ ! -d /var/lib/autopac ]; then
#    mkdir -p /var/lib/autopac
#fi

function log_metric() {
    if [ ! -f /var/log/autopac.csv ]; then
        echo 'timestamp,measurement,value' > /var/log/autopac.csv
    fi

    DATE_MS=$(date +%s%N | cut -b1-13)
    DATE_NS=$(date +%s%N)
    HOST=$(hostname)
    echo "$DATE_MS,$1,$2" >> /var/log/autopac.csv

    #curl -i -s -XPOST \
    #    'http://localhost:8086/write?db=db0' \
    #        --data-binary "$1,host=$HOST value=$2 $DATE_NS"
}

trap 'catch $? $LINENO' EXIT

catch() {
    if [ "$1" != "0" ]; then
        log_metric 'failure' '1'
        echo "Error $1 occurred on $2"
    fi
}

function update() {
    log_metric 'update_status' '1'
    echo "Updating pacman database"
    rm -f /var/tmp/autopac
    pacman -Syuw --noprogressbar --noconfirm # --dbpath /var/lib/autopac
    touch /var/tmp/autopac
    log_metric 'update_status' '0'
}

function upgrade() {
    if [ -f /var/tmp/autopac ]; then
        log_metric 'upgrade_status' '1'
        echo "Upgrading system"
        pacman -Su --noprogressbar --noconfirm # --dbpath /var/lib/autopac
        log_metric 'upgrade_status' '0'
        PACNEW_COUNT=$(find /etc -name "*.pacnew" 2>/dev/null | wc -l)
        log_metric 'pacnew' "$PACNEW_COUNT"
    else
        echo "Will not upgrade system"
    fi
}

# Check main option
case $1 in
    update)  update ;;
    upgrade) upgrade ;;
    *) echo "ERROR: Unknown argument '$1'";;
esac
