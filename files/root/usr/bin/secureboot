#!/bin/bash

# https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface/Secure_Boot#Using_your_own_keys

set -euo pipefail  # x for debug

if [ ! -d /efi ]; then
    echo "Not an EFI system"
    exit 1
fi

PREV_CWD=$(pwd)

if [ ! -d /boot/secureboot ]; then
    mkdir -p /boot/secureboot
    mkdir -p /boot/secureboot/vars-backup
    mkdir -p /boot/secureboot/keys
    chmod 700 /boot/secureboot
fi

# Back up current variables
if [ ! "$(ls -A /boot/secureboot/vars-backup)" ]; then
    cd /boot/secureboot/vars-backup
    efi-readvar -v PK  -o old_PK.esl
    efi-readvar -v KEK -o old_KEK.esl
    efi-readvar -v db  -o old_db.esl
    efi-readvar -v dbx -o old_dbx.esl
fi

# Create a GUID for owner identification
if [ ! -f /boot/secureboot/guid.txt ]; then
    cd /boot/secureboot
    uuidgen --random > /boot/secureboot/guid.txt
fi

# Read data
NAME=$(cat /etc/hostname)
GUID=$(cat /boot/secureboot/guid.txt)

# Initialize keys
if [ ! "$(ls -A /boot/secureboot/keys)" ]; then
    # Platform key
    cd /boot/secureboot/keys
    openssl req -newkey rsa:4096 -nodes -keyout PK.key -new -x509 -sha256 -days 3650 -subj "/CN=$NAME Platform Key/" -out PK.crt
    openssl x509 -outform DER -in PK.crt -out PK.cer
    cert-to-efi-sig-list -g "$GUID" PK.crt PK.esl
    sign-efi-sig-list -g "$GUID" -k PK.key -c PK.crt PK PK.esl PK.auth

    # Sign an empty file to allow removing Platform Key when in "User Mode"
    sign-efi-sig-list -g "$GUID" -c PK.crt -k PK.key PK /dev/null rm_PK.auth

    # Key Exchange Key
    openssl req -newkey rsa:4096 -nodes -keyout KEK.key -new -x509 -sha256 -days 3650 -subj "/CN=$NAME Key Exchange Key/" -out KEK.crt
    openssl x509 -outform DER -in KEK.crt -out KEK.cer
    cert-to-efi-sig-list -g "$GUID" KEK.crt KEK.esl
    sign-efi-sig-list -g "$GUID" -k PK.key -c PK.crt KEK KEK.esl KEK.auth

    # Signature Database key
    openssl req -newkey rsa:4096 -nodes -keyout db.key -new -x509 -sha256 -days 3650 -subj "/CN=$NAME Signature Database key/" -out db.crt
    openssl x509 -outform DER -in db.crt -out db.cer
    cert-to-efi-sig-list -g "$GUID" db.crt db.esl
    sign-efi-sig-list -g "$GUID" -k KEK.key -c KEK.crt db db.esl db.auth

    # Microsoft keys
    curl https://www.microsoft.com/pkiops/certs/MicWinProPCA2011_2011-10-19.crt --output MicWinProPCA2011_2011-10-19.crt
    curl https://www.microsoft.com/pkiops/certs/MicCorUEFCA2011_2011-06-27.crt  --output MicCorUEFCA2011_2011-06-27.crt
    sbsiglist --owner 77fa9abd-0359-4d32-bd60-28f4e78f784b --type x509 --output MS_Win_db.esl MicWinProPCA2011_2011-10-19.crt
    sbsiglist --owner 77fa9abd-0359-4d32-bd60-28f4e78f784b --type x509 --output MS_UEFI_db.esl MicCorUEFCA2011_2011-06-27.crt
    cat MS_Win_db.esl MS_UEFI_db.esl > MS_db.esl
fi

# Copy public keys to /boot/efi for first enroll
if [ ! "$(ls -A /efi/keys)" ]; then
    mkdir /efi/keys
    cp /boot/secureboot/keys/*.esl /efi/keys
fi

cd "$PREV_CWD"

# sbsign --key db.key --cert db.crt --output /boot/vmlinuz-linux /boot/vmlinuz-linux
# sbsign --key db.key --cert db.crt --output esp/EFI/BOOT/BOOTX64.EFI esp/EFI/BOOT/BOOTX64.EFI
# sbsign --key /boot/secureboot/keys/db.key  --cert /boot/secureboot/keys/db.crt

for kernel in /boot/vmlinuz-*; do
    KERNEL_NAME=$(echo "$kernel" | sed 's#/boot/vmlinuz-##')

    echo "==> Generating unified image for '$KERNEL_NAME'"

    cat /boot/*-ucode.img /boot/initramfs-$KERNEL_NAME.img > "/tmp/unified-$KERNEL_NAME.img"

    [ -d /efi/EFI/Linux ] || mkdir -p /efi/EFI/Linux

    #--add-section .splash="/usr/share/systemd/bootctl/splash-arch.bmp" --change-section-vma .splash=0x40000 \
    objcopy \
        --add-section .osrel="/usr/lib/os-release" --change-section-vma .osrel=0x20000 \
        --add-section .cmdline="/boot/cmdline.txt" --change-section-vma .cmdline=0x30000 \
        --add-section .linux="/boot/vmlinuz-$KERNEL_NAME" --change-section-vma .linux=0x2000000 \
        --add-section .initrd="/tmp/unified-$KERNEL_NAME.img" --change-section-vma .initrd=0x3000000 \
        "/usr/lib/systemd/boot/efi/linuxx64.efi.stub" \
        "/efi/EFI/Linux/$KERNEL_NAME.efi"

    rm -f "/tmp/unified-$KERNEL_NAME.img"

    sbsign \
        --key /boot/secureboot/keys/db.key \
        --cert /boot/secureboot/keys/db.crt \
        --output "/efi/EFI/Linux/$KERNEL_NAME.efi" \
        "/efi/EFI/Linux/$KERNEL_NAME.efi" 2>/dev/null
done

sbsign \
    --key /boot/secureboot/keys/db.key \
    --cert /boot/secureboot/keys/db.crt \
    --output "/efi/EFI/systemd/systemd-bootx64.efi" \
    "/efi/EFI/systemd/systemd-bootx64.efi" 2>/dev/null
